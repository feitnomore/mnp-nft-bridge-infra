# Copyright 2025 Marcelo Parisi (github.com/feitnomore)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-pipelinerun-status
  namespace: mnp-cicd
spec:
  description: Perform a validation on taskruns status for the pipeline
  params:
    - name: pipelinerun-name
      description: "The name of the current PipelineRun to inspect."
      type: string
    - name: IMAGE_REGISTRY
      description: The registry URL.
      type: string
    - name: CLI_IMAGE_NAME
      description: image name.
      type: string
    - name: CLI_IMAGE_TAG
      description: image tag.
      type: string

  steps:
    - name: check-taskrun-statuses
      image: $(params.IMAGE_REGISTRY)/$(params.CLI_IMAGE_NAME):$(params.CLI_IMAGE_TAG)
      imagePullPolicy: Always
      env:
        - name: KUBECONFIG
          value: "$(workspaces.kubeconfig.path)/kubeconfig"
      script: |
        #!/bin/bash
        set -e

        export PIPELINERUN_NAME="$(params.pipelinerun-name)"
        NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

        #echo "--- Checking status of TaskRuns for PipelineRun: ${PIPELINERUN_NAME} in namespace ${NAMESPACE} ---"
        sleep 10

        # Get taskruns list
        TASKRUN_NAMES=$(tkn taskrun list -n "${NAMESPACE}" -o json \
          | jq -r --arg prName "$PIPELINERUN_NAME" \
            '.items[] | select(.metadata.labels["tekton.dev/pipelineRun"] == $prName and .metadata.labels["tekton.dev/pipelineTask"] != "check-overall-status") | .metadata.name'
        )

        if [ -z "${TASKRUN_NAMES}" ]; then
          echo "Warning: No test TaskRuns found for this PipelineRun. Assuming success."
          exit 0
        fi

        # Check each taskrun on our list
        HAS_FAILURE=false
        for tr_name in ${TASKRUN_NAMES}; do          
          # Obter o status desta TaskRun específica
          # Usamos 'tkn tr describe' que é mais direto para um único item
          TASK_STATUS=$(tkn taskrun describe "${tr_name}" -n "${NAMESPACE}" -o jsonpath='{.status.conditions[0].reason}')
          
          TASK_NAME_LABEL=$(tkn taskrun describe "${tr_name}" -n "${NAMESPACE}" -o jsonpath='{.metadata.labels.tekton\.dev/pipelineTask}')

          # Ignore collect-artifacts task 
          if [ "${TASK_NAME_LABEL}" != "collect-artifacts" ]; then
            echo "Task: ${TASK_NAME_LABEL}, Status: ${TASK_STATUS}"
            if [ "${TASK_STATUS}" != "Succeeded" ]; then
              HAS_FAILURE=true
            fi
          fi
        done

        echo ""

        # Artifact collector
        export PIPELINERUN_NAME="$(params.pipelinerun-name)"
        export IMAGE_REGISTRY="$(params.IMAGE_REGISTRY)"
        export CLI_IMAGE_NAME="$(params.CLI_IMAGE_NAME)"
        export CLI_IMAGE_TAG="$(params.CLI_IMAGE_TAG)"

        envsubst < /opt/artifacts.yaml | kubectl create -f - 2>&1 > /dev/null

        # Exit according to the code
        echo "===================================="
        if [ "${HAS_FAILURE}" = "true" ]; then
          echo "Overall Result: FAILED"
          echo "===================================="
          exit 1
        else
          echo "Overall Result: PASSED"
          echo "===================================="
          exit 0
        fi
